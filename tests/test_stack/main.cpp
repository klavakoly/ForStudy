#include <ostream>
#include <iostream>
#include "../../prj.labs/stack/stack.h"
int main()
{
  using namespace std;
  cout << "Check default constructor." << endl << "Stack stack1 return: ";
  Stack stack1;
  stack1.WriteTo(cout);
  cout << endl << endl;
  stack1.Push(3);
  stack1.Push(5);
  cout << "Check function WriteTo. stack1 {5, 3}." << endl;
  cout << "Return : ";
  stack1.WriteTo(cout);
  cout << endl << endl;
  cout << "Check constructor stack(stack)." << endl;
  cout << "stack1: ";
  stack1.WriteTo(cout);
  cout << endl;
  cout << "Stack stack2(stack1), return stack2: ";
  Stack stack2(stack1);
  stack2.WriteTo(cout);
  cout << endl << endl;
  cout << "Check function Push. stack1 {5, 3}. stack1.Push(19)." << endl;
  cout << "Return :";
  stack1.Push(19);
  stack1.WriteTo(cout);
  cout << endl << endl;
  cout << "Check function Pop. stack1 {19, 5, 3}. stack1.Pop(). " << endl << "Last number = " << stack1.Pop();
  cout << endl << "Return stack1 :";
  stack1.WriteTo(cout);
  cout << endl << endl;
  cout << "Check function Top. stack1 {5, 3}. stack1.Top(). " << endl << "Last number = " << stack1.Top();
  cout << endl << "Return stack1 :";
  stack1.WriteTo(cout);
  cout << endl << endl;
  cout << "Check function IsEmpty. Not empty." << endl << "stack1 ";
  stack1.WriteTo(cout);
  cout << endl << "stack1.IsEmpty() return : " << stack1.IsEmpty();
  cout  << endl<< endl;
  stack2.Clear();
  cout << "Check function IsEmpty. Empty." << endl << "stack2 ";
  stack2.WriteTo(cout);
  cout << endl << "stack2.IsEmpty() return : " << stack2.IsEmpty();
  cout << endl<< endl;
  cout << "Check function Clear." << endl << "stack1 ";
  stack1.WriteTo(cout);
  cout << endl << "stack1.Clear() return stack1 :";
  stack1.Clear();
  stack1.WriteTo(cout);
  cout << endl << endl;
  stack1.Push(10);
  stack1.Push(18);
  stack1.Push(3);
  stack2.Push(10);
  stack2.Push(18);
  stack2.Push(3);
  cout << "Check operator=. stack1=stack2." << endl;
  cout << "stack1 ";
  stack1.WriteTo(cout);
  cout << endl;
  cout << "stack2 ";
  stack2.WriteTo(cout);
  cout << endl;
  cout << "stack1 = stack2 return:" << endl;
  stack1 = stack2;
  cout << "stack1 ";
  stack1.WriteTo(cout);
  cout << endl<< endl;
  cout << "Check operator=. stack1 longer than stack2." << endl;
  stack1.Push(13);
  cout << "stack1 ";
  stack1.WriteTo(cout);
  cout << endl;
  cout << "stack2 ";
  stack2.WriteTo(cout);
  cout << endl;
  cout << "stack1 = stack2 return:" << endl;
  stack1 = stack2;
  cout << "stack1 ";
  stack1.WriteTo(cout);
  cout << endl << endl;
  cout << "Check operator=. stack1 shoter than stack2." << endl;
  stack1.Pop();
  cout << "stack1 ";
  stack1.WriteTo(cout);
  cout << endl;
  cout << "stack2 ";
  stack2.WriteTo(cout);
  cout << endl;
  cout << "stack1 = stack2 return:" << endl;
  stack1 = stack2;
  cout << "stack1 ";
  stack1.WriteTo(cout);
  cout << endl << endl;
}